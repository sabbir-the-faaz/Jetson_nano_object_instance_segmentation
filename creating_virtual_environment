#installing python3 on the jetson nano
sudo apt-get install python3-pip 


#Setting up virtual environment 
pip3 install virtualenv 

#Setting the name of the environment
python3 -m virtualenv -p python3 env --system-site-packages

#see the env folder
ls
# activate the environment 
source env/bin/activate 
#check the open cv version 
python -c 'import cv2; print(cv2.__version__)' 

# lets check the memory size 
free -h
#Create SwapFile: Run all these commands
sudo fallocate -l 4G /var/swapfile 
sudo chmod 600 /var/swapfile
 sudo mkswap /var/swapfile
 sudo swapon /var/swapfile
 sudo bash -c 'echo "/var/swapfile swap swap defaults 0 0"  >> /etc/fstab’ 

#Reboot your PC: sudo reboot
#After rebooting check swap space  by using this command:   free -h

#Install these Dependencies before installing OpenCV:

sudo sh -c "echo '/usr/local/cuda/lib64' >> /etc/ld.so.conf.d/nvidia-tegra.conf“
sudo ldconfig
sudo apt-get install build-essential cmake git unzip pkg-config
sudo apt-get install libjpeg-dev libpng-dev libtiff-dev
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev
sudo apt-get install libgtk2.0-dev libcanberra-gtk*
sudo apt-get install python3-dev python3-numpy python3-pip
sudo apt-get install libxvidcore-dev libx264-dev libgtk-3-dev
sudo apt-get install libtbb2 libtbb-dev libdc1394-22-dev
sudo apt-get install libv4l-dev v4l-utils
sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
sudo apt-get install libavresample-dev libvorbis-dev libxine2-dev
sudo apt-get install libfaac-dev libmp3lame-dev libtheora-dev
sudo apt-get install libopencore-amrnb-dev libopencore-amrwb-dev
sudo apt-get install libopenblas-dev libatlas-base-dev libblas-dev
sudo apt-get install liblapack-dev libeigen3-dev gfortran
sudo apt-get install libhdf5-dev protobuf-compiler
sudo apt-get install libprotobuf-dev libgoogle-glog-dev libgflags-dev

#Explanation 
'''

let's go through each command to ensure there are no syntax errors and they are executed correctly:

Update dynamic linker run-time bindings:

sh
Copy code
sudo ldconfig
This command updates the linker cache to reflect changes made to shared libraries.

Install essential build tools:

sh
Copy code
sudo apt-get install build-essential cmake git unzip pkg-config
This installs essential tools like compilers (build-essential), build configuration tools (cmake), version control (git), archive extraction (unzip), and package configuration (pkg-config).

Install image and video processing libraries:

sh
Copy code
sudo apt-get install libjpeg-dev libpng-dev libtiff-dev
Installs development libraries for handling JPEG, PNG, and TIFF image formats.

Install GUI development libraries:

sh
Copy code
sudo apt-get install libgtk2.0-dev libcanberra-gtk*
Installs development libraries for GTK (Graphical Toolkit) version 2, and related sound support.

Install Python development tools:

sh
Copy code
sudo apt-get install python3-dev python3-numpy python3-pip
Installs Python development headers (python3-dev), NumPy library (python3-numpy), and Python package installer (python3-pip).

Install multimedia processing libraries:

sh
Copy code
sudo apt-get install libxvidcore-dev libx264-dev libgtk-3-dev
Installs development libraries for handling multimedia codecs like Xvid and x264, and GTK version 3.

Install video capturing libraries:

sh
Copy code
sudo apt-get install libtbb2 libtbb-dev libdc1394-22-dev libv4l-dev v4l-utils
Installs libraries for multi-threaded performance (libtbb), IEEE 1394 camera support (libdc1394), Video4Linux support (libv4l), and related utilities (v4l-utils).

Install GStreamer multimedia framework:

sh
Copy code
sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
Installs development libraries for the GStreamer multimedia framework.

Install audio and video codec libraries:

sh
Copy code
sudo apt-get install libavresample-dev libvorbis-dev libxine2-dev libfaac-dev libmp3lame-dev libtheora-dev libopencore-amrnb-dev libopencore-amrwb-dev
Installs development libraries for audio and video codecs including AAC (libfaac), MP3 (libmp3lame), Theora (libtheora), AMR Narrowband/Wideband (libopencore-amrnb, libopencore-amrwb), and others.

Install mathematical libraries:

sh
Copy code
sudo apt-get install libopenblas-dev libatlas-base-dev libblas-dev liblapack-dev libeigen3-dev gfortran
Installs mathematical libraries including BLAS (Basic Linear Algebra Subprograms) implementations (libopenblas, libatlas-base, libblas, liblapack), Eigen linear algebra library (libeigen3), and Fortran compiler (gfortran).

Install HDF5 library for handling large data:

sh
Copy code
sudo apt-get install libhdf5-dev
Installs development files for the HDF5 library, used for managing and storing large amounts of data.

Install protocol buffers compiler and libraries:

sh
Copy code
sudo apt-get install protobuf-compiler libprotobuf-dev libgoogle-glog-dev libgflags-dev
Installs protocol buffers compiler (protobuf-compiler) and development libraries (libprotobuf-dev, libgoogle-glog-dev, libgflags-dev) for efficient data serialization and logging.

These commands collectively set up a development environment suitable for building and running computer vision, multimedia processing, and machine learning applications on the Jetson Nano platform. Each command installs specific libraries and tools required for different aspects of application development.
"""



Download OpenCV:
cd ~
wget -O opencv.zip https://github.com/opencv/opencv/archive/4.5.1.zip 
wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.5.1.zip 
unzip opencv.zip 
unzip opencv_contrib.zip

Now rename the directories. Type each command below, one after the other.
mv opencv-4.5.1 opencv
mv opencv_contrib-4.5.1 opencv_contrib
rm opencv.zip
rm opencv_contrib.zip

Lets build OpenCV now:
cd ~/opencv
mkdir build
cd build 


copy and paste this entire block of commands below into your terminal.

cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules -D EIGEN_INCLUDE_PATH=/usr/include/eigen3 -D WITH_OPENCL=OFF -D WITH_CUDA=ON -D CUDA_ARCH_BIN=5.3 -D CUDA_ARCH_PTX="" -D WITH_CUDNN=ON -D WITH_CUBLAS=ON -D ENABLE_FAST_MATH=ON -D CUDA_FAST_MATH=ON -D OPENCV_DNN_CUDA=ON -D ENABLE_NEON=ON -D WITH_QT=OFF -D WITH_OPENMP=ON -D WITH_OPENGL=ON -D BUILD_TIFF=ON -D WITH_FFMPEG=ON -D WITH_GSTREAMER=ON -D WITH_TBB=ON -D BUILD_TBB=ON -D BUILD_TESTS=OFF -D WITH_EIGEN=ON -D WITH_V4L=ON -D WITH_LIBV4L=ON -D OPENCV_ENABLE_NONFREE=ON -D INSTALL_C_EXAMPLES=OFF -D INSTALL_PYTHON_EXAMPLES=OFF -D BUILD_NEW_PYTHON_SUPPORT=ON -D BUILD_opencv_python3=TRUE -D OPENCV_GENERATE_PKGCONFIG=ON -D BUILD_EXAMPLES=OFF ..

Build OpenCV. This command below will take a long time (around 2 hours), make -j4     # (make then space single dash and then j4)

Finish the install:
cd ~
sudo rm -r /usr/include/opencv4/opencv2
cd ~/opencv/build
sudo make install
sudo ldconfig
make clean
sudo apt-get update 

Verify OpenCV Installation
#open python3 shell
python3
import cv2
cv2._version_


Install jtop, a system monitoring software for Jetson Nano.
cd ~
sudo -H pip3 install -U jetson-stats 
sudo reboot
jtop


Test Your Camera on Jetson Nano:
Turn on your Jetson Nano.
Open a new terminal window, and type:
ls /dev/video0   #csi camera
ls /dev/video*   # show you a list of cameras

Take a Photo:
nvgstcapture-1.0 --orientation=2       # for testing CSI camera
# V4L2 USB camera 
nvgstcapture-1.0 --camsrc=0 --cap-dev-node=1


